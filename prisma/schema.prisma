// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String    @default("student") // student, teacher, admin
  department    String?
  status        String    @default("offline") // online, offline
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  posts                Post[]
  comments             Comment[]
  sentMessages         Message[]             @relation("SentMessages")
  receivedMessages     Message[]             @relation("ReceivedMessages")
  chatRoomUsers        ChatRoomUser[]
  notifications        Notification[]
  accounts             Account[]
  sessions             Session[]
  resources            Resource[]
  notificationSettings NotificationSettings?
  commentReactions     CommentReaction[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id         String    @id @default(cuid())
  content    String    @db.Text
  department String?
  tags       String[]  @default([])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  authorId   String
  author     User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments   Comment[]
  likes      Like[]
  media      PostMedia[]
}

model PostMedia {
  id        String   @id @default(cuid())
  type      String   // "image" or "video"
  url       String
  poster    String?  // For video thumbnails
  order     Int      // To maintain the order of media items
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  postId    String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  CommentReaction CommentReaction[]
}

model CommentReaction {
  id        String   @id @default(cuid())
  type      String // like, love, laugh, etc.
  createdAt DateTime @default(now())
  commentId String
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId, type])
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  postId    String
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

// Chat Models
model ChatRoom {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  isGroup     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  avatar      String?
  lastActive  DateTime @default(now())

  // Relations
  users    ChatRoomUser[]
  messages Message[]
}

model ChatRoomUser {
  id          String   @id @default(cuid())
  userId      String
  chatRoomId  String
  isAdmin     Boolean  @default(false)
  joinedAt    DateTime @default(now())
  unreadCount Int      @default(0)

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)

  @@unique([userId, chatRoomId])
}

model Message {
  id         String   @id @default(cuid())
  content    String   @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  senderId   String
  chatRoomId String

  // For direct messages
  receiverId String?

  // File attachment
  fileUrl  String?
  fileName String?
  fileType String?
  fileSize Int?

  // Relations
  sender   User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User?    @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: SetNull)
  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  type      String // message, mention, post, etc.
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  relatedId String? // ID of related entity (message, post, etc.)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Resource {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  type        String
  url         String?
  fileSize    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String
  courseId    String?
  tags        String[]
  subject     String?
  department  String?
  fileType    String?
  uploadDate  DateTime?

  // Relations
  author User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  course Course? @relation(fields: [courseId], references: [id], onDelete: SetNull)
}

model Course {
  id          String     @id @default(cuid())
  name        String
  description String?    @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  resources   Resource[]
}

model NotificationSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  emailNotifications    Boolean  @default(true)
  pushNotifications     Boolean  @default(true)
  chatNotifications     Boolean  @default(true)
  postNotifications     Boolean  @default(true)
  resourceNotifications Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
